ConnectionManager
=================

ConnectionManager is a library that wraps the connman dbus API and provides
Qt style signals and some misc functionality.

The whole idea behind this is to let connman to handle all the hw and low
level details providing a high level API for QBookApp.

API
===

ConnectionManager acts a singleton with the getInstance() function
returning a single object that is shared through the application.

Query functions:
* bool isOffline(): returns true if the device is in OfflineMode

* bool isConnected(): returns true if the device is connected to a network

* QString getState(): return the state: "offline", "idle", "ready" and
  "online"

* QList<Network> getNetworks(): returns a list of Network objects with
  available networks. Connman does the scanning in the background. It will
  only return results if the device is not in offline mode.


Chaging state function:
* void setOnline(): turns offline mode off. If it was offline device will
  try to autoconnected if a known wifi is present

* void setOffline(): turns offline mode on. It will disconnect and turn
  interfaces down


Doing operations:
* void scan(): Forces an scan. It should not be needed, but with connman
  1.1 we need if after coming from offline mode

* void connectTo(QString): connect to the network specified by path. This
  function is the only one that blocks (well, setOnline does too by now but
  it is really fast). Because this function will block until the connect
  succeed or fail and that can depend on user input, if we want to
  implement the user input agent on the same process we cannot call
  directly to this functions, because we will block the dbus connection and
  will never notice the agent request. To solve that, we have an external
  helper program, "Connect" that calls this function with the path as first
  argment. 

* void disconnectFrom(QString): disconnect from the currently connected
  network specified by path

* void remove(QString): removes the network specified by path from the
  connman db and if connected, discconect from it

* void registerAgent(QDBusObjectPath): register a dbus service as the user
  input Agent with connman. This agent will recive password input requests.


Signals:
* void connected(): Emitted when device is connected to a new network

* void disconnected(): Emitted when device is disconneted from current
  network

* void currentNetworkLevelChanged(int): Emitted when the signal level of
  the currently connected network changes

* void currentNetworkError(QString): Emitted when current network enters
  the "failure" state.

* void autoConnecting(QString): Emitted when the devices tries to connect
  to a known network automatically

* void autoConnectFailed(): Emitted when an autoconnection failed

* void autoConnectDone(): Emitted when an autconnection was done.

* void servicesAdded(): Emitted when new networks have been found during an
  autoscan


Usage in QBookApp
=================

From QBookApp ConnectionManager is used in two single points:
- requestConnection function
- SettingsWiFiList class

Every time the application needs a connection should invoke
QBookApp::requestConnection(). This functions will autoconnect to a know
wifi, and if not, it will bring up the SettingsWiFiList.

The SettingsWiFiList class handles the setting online/offline and shows
the available networks. It invokes connectTo through the external helper
program and disconnect/remove functions based on the UI.


Agent implementation
====================

When connman needs a password to connect to a network it search for
registerd agents implementing the interface net.connman.Agent. In order to
implement it QBookApp has a QDBusAbstractAdaptor autogenerated from
agent.xml introspection file. The class MyAgent has the real implementation
of the functions: 
- RequestInput: When connman needs a password. This function uses the class
  PasswordRequester to bring the user a dialog and get the password. 
- RequestBrowser: When connman knows that is a captive network and a
  browser login is needed. Currently empty
- ReportError: Reports an error with the password/connection

The Agent creation and registration through ConnectionManager
registerAgent() function is done in the PasswordRequester constructor.

ConnectionManager Internals
===========================

Technology, Service, Manager and Clock classes are implemented as
autogenerated QDBusAbstractAdaptor classes. They are autogenerated from the
service definition xml with:

qdbusxml2cpp -v -a <classname> -c <classname> <xmlfile>

The xml files where obtained using d-feet to invoke dbus.Instrocpection on
a running connman. Those xml has to be changed to map complex types adding
annotations:
- For "a{sv}" parameters:
  <annotation name="com.trolltech.QtDBus.QtTypeName.XXX" value="QVariantMap"/>
	where XXX is Out0, Out1..., In0, In1... depending on the parameter
        direction and number
- For "a(oa{sv})" parameters:
  <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="TechnologiesList"/>

TechnologiesList is a simple class we made to handle this complex type. Is
a typedef for QList<TechnologyStruct>, where TechnologyStruct is:
struct TechnologyStruct {
        QDBusObjectPath path;
        QVariantMap     properties;
};

In order to get this complex type registered any application using
ConnectionManager library should call TechnologiesListTypesInit() before.

The resulting autogenerated files are committed to the repository to make
the build easier, because they need to be modified to include
TechnologiesList.h

The library does not export any of the adaptors objects and everything
should be done with its API. The getNetworks functions returns a list of
Network objects, a very simpler class representing a network with several
getters to retrieve information from it.

Under the test/ directory we have a sample program: test-conman that
provides a command line interface to ConnectionManager API.

connman details
===============

Currently we are using connman 1.1 packaged for debian. We add some
configuration changes through the bqPackages connman-conf:

- /etc/connman/main.conf: providing a high default timeout:
   [General]
   InputRequestTimeout=300
- /etc/dbus-1/system.conf: a mofified dbus configuration file adding a high
  timeout for replies. This is the standard dbus conf file with this
  adition:
   <limit name="reply_timeout">300000</limit>
- /etc/dbus-1/system.d/connman.conf: configuration for the connman services
  to allow agent registration and method calls:
  <!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
  <busconfig>
      <policy user="root">
          <allow own="net.connman"/>
          <allow send_interface="net.connman.Agent"/>
      </policy>
      <policy context="default">
          <allow send_destination="net.connman"/>
      </policy>
      <policy user="root">
          <allow send_destination="net.connman"/>
          <allow own="com.bq.reader.connmanAgent"/>
          <allow send_destination="net.connman.Agent"/>
          <allow send_interface="net.connman.Agent"/>
      </policy>
  </busconfig>

The reply timeout modification can be avoided if we implement a delayed
reply for the RequestInput method (see FIXME comment in
PasswordRequester.cpp)

Use in the QBookApp x86 emulator
================================

In order to get the emulator using the same very API of ConnectionManager, 
that is, getting the same behaviour than on the device we need to uninstall
NetworkManager from the computer and install connman-1.1 (ubuntu package
or from sources). After that, in order to connect the laptop to a wifi (or 
wire) we need to use QBookApp or the test program.
